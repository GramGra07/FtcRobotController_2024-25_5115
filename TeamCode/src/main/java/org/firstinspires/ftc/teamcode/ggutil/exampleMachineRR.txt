package org.firstinspires.ftc.teamcode.ggutil

import com.acmerobotics.roadrunner.geometry.Pose2d
import com.qualcomm.robotcore.eventloop.opmode.Autonomous
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode
import org.firstinspires.ftc.teamcode.Enums.Alliance
import org.firstinspires.ftc.teamcode.Enums.EndPose
import org.firstinspires.ftc.teamcode.Enums.PathLong
import org.firstinspires.ftc.teamcode.Enums.StartSide
import org.firstinspires.ftc.teamcode.opModes.autoSoftware.autoHardware
import org.firstinspires.ftc.teamcode.opModes.autoSoftware.autoPatterns
import org.firstinspires.ftc.teamcode.opModes.autoSoftware.autoSorting
import org.firstinspires.ftc.teamcode.opModes.rr.drive.MecanumDrive

@Autonomous(
    group = autoSorting.fullAutoI_IP_Sort,
    preselectTeleOp = autoSorting.preselect
) //@Disabled

class exampleMachineRR : LinearOpMode() {
    var startPose: Pose2d = autoHardware.startPose // get the starting pose
    var robot = autoHardware(this) // initialize the robot class
    override fun runOpMode() {
        val drive = MecanumDrive(hardwareMap)
        drive.poseEstimate =
            autoHardware.getStartPose(Alliance.RED, StartSide.RIGHT) // set the starting pose
        val machine = autoPatterns.cycleMachine(drive, PathLong.INSIDE, EndPose.LEFT)
        robot.initAuto(hardwareMap, this, true)
        machine.start()
        while (machine.mainLoop(this)) {
            machine.update()
        }
    }
}